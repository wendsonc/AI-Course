# -*- coding: utf-8 -*-
"""KNN - C.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_J4Vy2UADULhV-CDuOfmO-ufJPIYZkxt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from sklearn import preprocessing
from sklearn import utils
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_regression
from sklearn.neighbors import KNeighborsRegressor

from sklearn.linear_model import LinearRegression

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import BallTree

data = pd.read_csv('winequality-red.csv')
del_atributos = data.drop(['citric acid', 'density', 'pH', 'free sulfur dioxide'], axis=1) #Excluir os atributos 

array_x = np.array(del_atributos.drop('quality',1))
array_y = np.array(del_atributos['quality'])

X = array_x
y = array_y

X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.30, random_state=0)

"""Aplicação do KNN com o algoritmo BALL TREE com ManhattanDistance usando K = 10, 
60, 110, 160 e 210
"""

k = 5 #são cinco valores de K
vizinhos = 10 #valor inicial de K

for elemento in range(k):

  knn = KNeighborsClassifier(n_neighbors = vizinhos, algorithm='ball_tree', metric='manhattan')
  knn.fit(X_train, y_train)

  y_pred = knn.predict(X_test)

  print("\n")
  print("METRÍCAS DE AVALIAÇÃO PARA K = ", vizinhos)

  target = ['Nota 3', 'Nota 4', 'Nota 5', 'Nota 6', 'Nota 7', 'Nota 8',]
  print(classification_report(y_test, y_pred, target_names= target))

  print("MATRIZ DE CONFUSÃO")
  print(confusion_matrix(y_test, y_pred))

  vizinhos += 50

"""Aplicação do KNN com o algoritmo KD TREE com ChebyshevDistance usando K = 10, 
60, 110, 160 e 210
"""

k = 5 #são cinco valores de K
vizinhos = 10 #valor inicial de K

for elemento in range(k):

  knn = KNeighborsClassifier(n_neighbors = vizinhos, algorithm='kd_tree', metric='chebyshev')
  knn.fit(X_train, y_train)

  y_pred = knn.predict(X_test)

  print("\n")
  print("METRÍCAS DE AVALIAÇÃO PARA K = ", vizinhos)

  target = ['Nota 3', 'Nota 4', 'Nota 5', 'Nota 6', 'Nota 7', 'Nota 8',]
  print(classification_report(y_test, y_pred, target_names= target))

  print("MATRIZ DE CONFUSÃO K = ", vizinhos)
  print(confusion_matrix(y_test, y_pred))

  vizinhos += 50

fig = px.scatter_3d(data, x='fixed acidity', y='free sulfur dioxide', z='alcohol', 
              color='quality')
fig.show()